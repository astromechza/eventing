// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package public

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	externalRef0 "github.com/astromechza/eventing/internal/api/common"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// CreateWorkspaceRequest defines model for CreateWorkspaceRequest.
type CreateWorkspaceRequest struct {
	DisplayName string `json:"display_name"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Lifecycle   string    `json:"lifecycle"`
	Revision    int       `json:"revision"`
	Uid         string    `json:"uid"`
}

// IdempotencyKeyHeader defines model for idempotencyKeyHeader.
type IdempotencyKeyHeader = string

// WorkspaceIdPathParam defines model for workspaceIdPathParam.
type WorkspaceIdPathParam = string

// CreateWorkspaceParams defines parameters for CreateWorkspace.
type CreateWorkspaceParams struct {
	// IdempotencyKey The HTTP Idempotency-Key
	IdempotencyKey *IdempotencyKeyHeader `json:"Idempotency-Key,omitempty"`
}

// CreateWorkspaceJSONRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody = CreateWorkspaceRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new workspace
	// (POST /workspaces/)
	CreateWorkspace(ctx echo.Context, params CreateWorkspaceParams) error
	// Attempt to delete the Workspace by id
	// (DELETE /workspaces/{workspaceId})
	DeleteWorkspace(ctx echo.Context, workspaceId WorkspaceIdPathParam) error
	// Get a Workspace by id.
	// (GET /workspaces/{workspaceId})
	GetWorkspace(ctx echo.Context, workspaceId WorkspaceIdPathParam) error
	// Update fields of the Workspace by id
	// (PATCH /workspaces/{workspaceId})
	PatchWorkspace(ctx echo.Context, workspaceId WorkspaceIdPathParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateWorkspace converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkspace(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateWorkspaceParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey IdempotencyKeyHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Idempotency-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, valueList[0], &IdempotencyKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Idempotency-Key: %s", err))
		}

		params.IdempotencyKey = &IdempotencyKey
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateWorkspace(ctx, params)
	return err
}

// DeleteWorkspace converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkspace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId WorkspaceIdPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkspace(ctx, workspaceId)
	return err
}

// GetWorkspace converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkspace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId WorkspaceIdPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkspace(ctx, workspaceId)
	return err
}

// PatchWorkspace converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWorkspace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workspaceId" -------------
	var workspaceId WorkspaceIdPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, ctx.Param("workspaceId"), &workspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWorkspace(ctx, workspaceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/workspaces/", wrapper.CreateWorkspace)
	router.DELETE(baseURL+"/workspaces/:workspaceId", wrapper.DeleteWorkspace)
	router.GET(baseURL+"/workspaces/:workspaceId", wrapper.GetWorkspace)
	router.PATCH(baseURL+"/workspaces/:workspaceId", wrapper.PatchWorkspace)

}

type CreateWorkspaceRequestObject struct {
	Params CreateWorkspaceParams
	Body   *CreateWorkspaceJSONRequestBody
}

type CreateWorkspaceResponseObject interface {
	VisitCreateWorkspaceResponse(w http.ResponseWriter) error
}

type CreateWorkspace201JSONResponse Workspace

func (response CreateWorkspace201JSONResponse) VisitCreateWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateWorkspace400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateWorkspace400ApplicationProblemPlusJSONResponse) VisitCreateWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkspaceRequestObject struct {
	WorkspaceId WorkspaceIdPathParam `json:"workspaceId"`
}

type DeleteWorkspaceResponseObject interface {
	VisitDeleteWorkspaceResponse(w http.ResponseWriter) error
}

type DeleteWorkspace202JSONResponse Workspace

func (response DeleteWorkspace202JSONResponse) VisitDeleteWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type DeleteWorkspace204Response struct {
}

func (response DeleteWorkspace204Response) VisitDeleteWorkspaceResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWorkspace400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteWorkspace400ApplicationProblemPlusJSONResponse) VisitDeleteWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkspaceRequestObject struct {
	WorkspaceId WorkspaceIdPathParam `json:"workspaceId"`
}

type GetWorkspaceResponseObject interface {
	VisitGetWorkspaceResponse(w http.ResponseWriter) error
}

type GetWorkspace200JSONResponse Workspace

func (response GetWorkspace200JSONResponse) VisitGetWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkspace404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetWorkspace404ApplicationProblemPlusJSONResponse) VisitGetWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchWorkspaceRequestObject struct {
	WorkspaceId WorkspaceIdPathParam `json:"workspaceId"`
}

type PatchWorkspaceResponseObject interface {
	VisitPatchWorkspaceResponse(w http.ResponseWriter) error
}

type PatchWorkspace202JSONResponse Workspace

func (response PatchWorkspace202JSONResponse) VisitPatchWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type PatchWorkspace400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PatchWorkspace400ApplicationProblemPlusJSONResponse) VisitPatchWorkspaceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new workspace
	// (POST /workspaces/)
	CreateWorkspace(ctx context.Context, request CreateWorkspaceRequestObject) (CreateWorkspaceResponseObject, error)
	// Attempt to delete the Workspace by id
	// (DELETE /workspaces/{workspaceId})
	DeleteWorkspace(ctx context.Context, request DeleteWorkspaceRequestObject) (DeleteWorkspaceResponseObject, error)
	// Get a Workspace by id.
	// (GET /workspaces/{workspaceId})
	GetWorkspace(ctx context.Context, request GetWorkspaceRequestObject) (GetWorkspaceResponseObject, error)
	// Update fields of the Workspace by id
	// (PATCH /workspaces/{workspaceId})
	PatchWorkspace(ctx context.Context, request PatchWorkspaceRequestObject) (PatchWorkspaceResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateWorkspace operation middleware
func (sh *strictHandler) CreateWorkspace(ctx echo.Context, params CreateWorkspaceParams) error {
	var request CreateWorkspaceRequestObject

	request.Params = params

	var body CreateWorkspaceJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateWorkspace(ctx.Request().Context(), request.(CreateWorkspaceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateWorkspace")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateWorkspaceResponseObject); ok {
		return validResponse.VisitCreateWorkspaceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteWorkspace operation middleware
func (sh *strictHandler) DeleteWorkspace(ctx echo.Context, workspaceId WorkspaceIdPathParam) error {
	var request DeleteWorkspaceRequestObject

	request.WorkspaceId = workspaceId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWorkspace(ctx.Request().Context(), request.(DeleteWorkspaceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWorkspace")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteWorkspaceResponseObject); ok {
		return validResponse.VisitDeleteWorkspaceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWorkspace operation middleware
func (sh *strictHandler) GetWorkspace(ctx echo.Context, workspaceId WorkspaceIdPathParam) error {
	var request GetWorkspaceRequestObject

	request.WorkspaceId = workspaceId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkspace(ctx.Request().Context(), request.(GetWorkspaceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkspace")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWorkspaceResponseObject); ok {
		return validResponse.VisitGetWorkspaceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchWorkspace operation middleware
func (sh *strictHandler) PatchWorkspace(ctx echo.Context, workspaceId WorkspaceIdPathParam) error {
	var request PatchWorkspaceRequestObject

	request.WorkspaceId = workspaceId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchWorkspace(ctx.Request().Context(), request.(PatchWorkspaceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchWorkspace")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchWorkspaceResponseObject); ok {
		return validResponse.VisitPatchWorkspaceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
